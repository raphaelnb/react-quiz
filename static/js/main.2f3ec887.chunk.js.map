{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","images/nattu-adnan.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","Wrapper","styled","div","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f3ec887.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer,\r\n            ]),\r\n        }\r\n    ));\r\n};","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\n    ","import React from 'react';\r\n//types\r\nimport { AnswerObject } from '../App';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number; \r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ \r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer, \r\n    questionNr, \r\n    totalQuestions, \r\n}) => (\r\n    <div>\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        <div>\r\n            {answers.map(answer => (\r\n                <div key={answer}>\r\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/nattu-adnan.a634a247.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/nattu-adnan.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;   \r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        backgrounf-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: felx;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-familly: 'Catamaran', sans-serif; \r\n    }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-itens: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline;\r\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-webkit-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n\r\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n//components\nimport QuestionCard from './components/QuestionCard';\n//types\nimport { QuestionState, Difficulty } from './API';\n// styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move to the next qustion if not the last qustion\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);     \n    } else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"Score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}